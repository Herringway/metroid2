module metroid2.bank05;

import std.logger;

import metroid2.bank00;
import metroid2.bank01;
import metroid2.data;
import metroid2.defs;
import metroid2.external;
import metroid2.globals;

public import metroid2.doors;


void creditsDrawTimerDigits() {
	assert(0);
}
void creditsDrawOneDigit(ubyte a) {
	assert(0);
}
void creditsLoadFont() {
	copyToVRAM(&graphicsCreditsFont[0], &gb.vram[VRAMDest.creditsFont], 0x200);
}
void vblankDrawCreditsLine() {
	assert(0);
}
void loadTitleScreen() {
	titleLoadGraphics();
	gb.vram[VRAMDest.statusBar .. VRAMDest.statusBar + 0x14] = hudBaseTilemap[];
	gb.vram[VRAMDest.itemText .. VRAMDest.itemText + 0x14] = saveTextTilemap[];
	screen0[0 .. 0x400] = titleTileMap[];
	gb.WX = 7;
	gb.WY = 136;
	scrollY = 0;
	gb.LCDC = 0b11000011;
	songRequest = Song.title;
	titleUnusedD039 = 0;
	titleClearSelected = 0;
	if (loadingFromFile) {
		titleClearSelected = 1;
	}
	countdownTimer = 0xFFFF;
	gameMode = GameMode.title;
}

immutable ubyte[] hudBaseTilemap = [0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0x9E, 0xAF, 0xAF, 0xAF, 0x9F, 0x9E, 0xAF, 0xAF, 0xAF, 0xAF, 0xFF, 0xFF, 0x9E, 0xA3, 0xA0];
immutable ubyte[] saveTextTilemap = [0xFF, 0xD2, 0xC0, 0xD5, 0xC4, 0xDE, 0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF];

void titleScreenRoutine() {
	oamClearTable();
	bgPalette = 0x93;
	if (!(countdownTimer & 0x300) && (cast(ubyte)countdownTimer < 16) && (countdownTimer & 1)) {
		bgPalette = 0x90;
	}
	if (titleStarX >= 3) {
		titleStarX -= 2;
		titleStarY += 1;
	}
	if ((gb.DIV == frameCounter) && (frameCounter & 1)) {
		titleStarY = gb.DIV;
		titleStarX = 0xFF;
	}
	spriteYPixel = titleStarY;
	spriteXPixel = titleStarX;
	spriteID = 6;
	spriteAttr = (frameCounter & 2) << 1;
	drawNonGameSprite();
	spriteYPixel = 116;
	if (titleClearSelected) {
		spriteYPixel = 128;
	}
	spriteXPixel = 56;
	spriteAttr = 0;
	spriteID = titleCursorTable[(frameCounter & 0b1100) >> 2];
	drawNonGameSprite();
	spriteID = cast(ubyte)(activeSaveSlot + 35);
	drawNonGameSprite();
	spriteXPixel = 68;
	spriteYPixel = 116;
	spriteID = 0;
	drawNonGameSprite();
	if (titleShowClearOption) {
		spriteYPixel = 128;
		spriteID = 1;
		drawNonGameSprite();
	}
	titleClearUnusedOAMSlots();
	if (inputRisingEdge == Pad.select) {
		sfxRequestSquare1 = Square1SFX.select;
		titleShowClearOption ^= 0xFF;
	}
	if ((inputRisingEdge == Pad.right) && (inputPressed == Pad.right)) {
		sfxRequestSquare1 = Square1SFX.select;
		activeSaveSlot++;
		if (activeSaveSlot == 3) {
			activeSaveSlot = 0;
		}
	}
	if ((inputRisingEdge == Pad.left) && (inputPressed == Pad.left)) {
		sfxRequestSquare1 = Square1SFX.select;
		activeSaveSlot--;
		if (activeSaveSlot == 0xFF) {
			activeSaveSlot = 2;
		}
	}
	titleClearSelected = 0;
	if (titleShowClearOption && (inputPressed & Pad.down)) {
		titleClearSelected = 1;
		if (inputRisingEdge & Pad.down) {
			sfxRequestSquare1 = Square1SFX.select;
		}
	}
	if (!(inputRisingEdge & Pad.start)) {
		return;
	}
	debugFlag = 0;
	bgPalette = 0x93;
	if (titleClearSelected) {
		sfxRequestNoise = NoiseSFX.u0F;
		enableSRAM();
		sram.saves[activeSaveSlot].magic[0 .. 2] = 0;
		disableSRAM();
		titleShowClearOption = 0;
		infof("Save file %s cleared", activeSaveSlot);
		return;
	}
	sfxRequestSquare1 = Square1SFX.select;
	songRequest = Song.samusFanfare;
	loadingFromFile = 0;
	version(none) { // this only worked accidentally
		//ld hl, saveFile_magicNumber
		//; Get base address of save slot
		//; de = $A000 + (activeSaveSlot * $40)
		//ld a, [activeSaveSlot]
		//sla a
		//sla a
		//swap a
		//ld e, a
		//ld d, HIGH(saveData_baseAddr) ;$A0
		//; Loop until we find a mismatch between the magic number in ROM and the save slot
		//.checkLoop:
		//	ld a, [hl+]
		//	ld b, a
		//	ld a, [de]
		//	inc de
		//	cp b
		//jr z, .checkLoop
		//; Check if the last byte read from ROM was greater than $08
		//ld a, b
		//cp $08
		//jr c, .endIf_J
		//	ld a, $ff
		//	ld [loadingFromFile], a
		//.endIf_J:
	} else {
		if (sram.saves[activeSaveSlot].magic == saveMagic) {
			loadingFromFile = 0xFF;
		}
	}
	sram.saveLastSlot = activeSaveSlot;
	disableSRAM();
	gameMode = GameMode.newGame;
	if (loadingFromFile) {
		gameMode = GameMode.loadSave;
	}
}

void titleLoadGraphics() {
	copyToVRAM(&graphicsTitleScreen[0], &gb.vram[VRAMDest.titleTiles], 0x1000);
}
void titleClearUnusedOAMSlots() {
	oamBuffer[oamBufferIndex / 4 .. $] = oamBuffer[0].init;
}

immutable ubyte[] titleCursorTable = [2, 3, 4, 3];

immutable ubyte[] titleTileMap = [
	0x45, 0xFF, 0x42, 0xFF, 0xFF, 0xFF, 0xFF, 0x41, 0xFF, 0xFF, 0xFF, 0xFF, 0x40, 0x42, 0xFF, 0xFF, 0xFF, 0xFF, 0x43, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0x41, 0x40, 0xFF, 0xFF, 0x43, 0xFF, 0xFF, 0xDD, 0xDE, 0xDF, 0xE0, 0xE1, 0xE2, 0xFF, 0xFF, 0x44, 0x42, 0xFF, 0xFF, 0x40, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x46, 0xE3, 0xE4, 0xE5, 0xE6, 0x47, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0x44, 0xFF, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F, 0xD0, 0xD1, 0xD2, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xD3, 0xD4, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF, 0xD5, 0xD6, 0xD7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0x80, 0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF, 0xD8, 0xD9, 0xDA, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xC1, 0xC0, 0xFF, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xDB, 0xDC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0x45, 0xFF, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0xFF, 0xFF, 0x41, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0x42, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x45, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0x40, 0x45, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x41, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0x45, 0x44, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x44, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0x42, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x42, 0xFF, 0xFF, 0x40, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0x40, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x45, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0x41, 0xFF, 0x0F, 0x1F, 0x3E, 0x3E, 0x3F, 0xFF, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0xFF, 0xFF, 0x44, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0x42, 0x44, 0xFF, 0xFF, 0x41, 0xFF, 0xFF, 0xFF, 0xFF, 0x43, 0xFF, 0x41, 0xFF, 0xFF, 0xFF, 0xFF, 0x42, 0xFF, 0xFF, 0x43, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
];