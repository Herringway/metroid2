module metroid2.bank05;

import std.logger;

import metroid2.bank00;
import metroid2.bank01;
import metroid2.data;
import metroid2.defs;
import metroid2.external;
import metroid2.globals;

import replatform64.gameboy;

public import metroid2.doors;


void creditsDrawTimerDigits(ubyte a) {
	creditsDrawOneDigit(cast(ubyte)((a / 10 & 0xF) + 0xF0));
	creditsDrawOneDigit(cast(ubyte)(((a % 10) & 0xF) + 0xF0));
}
void creditsDrawOneDigit(ubyte a) {
	auto hl = &oamBuffer[oamBufferIndex];
	hl.y = spriteYPixel;
	hl.x = spriteXPixel;
	spriteXPixel += 8;
	hl.tile = a;
	hl.flags = spriteAttr;
	oamBufferIndex++;
}
void creditsLoadFont() {
	copyToVRAM(&graphicsCreditsFont[0], &gb.vram[VRAMDest.creditsFont], 0x200);
}
void vblankDrawCreditsLine() {
	auto hl = creditsTextPointer;
	auto de = tilemapDest;
	enableSRAM(); // credits text buffer is in SRAM
	if (hl[0] != 0xF1) {
		for (int i = 20; i > 0; i--) {
			gb.vram[de++] = cast(ubyte)((hl++)[0] - 0x21);
		}
	} else {
		for (int i = 20; i > 0; i--) {
			gb.vram[de++] = 0xFF;
		}
		hl++;
	}
	disableSRAM();
	creditsTextPointer = hl;
	creditsNextLineReady = 0;
	oamDMA();
	vblankDoneFlag = 1;
}
void loadTitleScreen() {
	titleLoadGraphics();
	gb.vram[VRAMDest.statusBar .. VRAMDest.statusBar + 0x14] = hudBaseTilemap[];
	gb.vram[VRAMDest.itemText .. VRAMDest.itemText + 0x14] = saveTextTilemap[];
	screen0[0 .. 0x400] = titleTileMap[];
	gb.WX = 7;
	gb.WY = 136;
	scrollY = 0;
	gb.LCDC = 0b11000011;
	audio.songRequest = Song.title;
	titleUnusedD039 = 0;
	titleClearSelected = 0;
	if (loadingFromFile) {
		titleClearSelected = 1;
	}
	countdownTimer = 0xFFFF;
	gameMode = GameMode.title;
}

immutable ubyte[] hudBaseTilemap = [0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0x9E, 0xAF, 0xAF, 0xAF, 0x9F, 0x9E, 0xAF, 0xAF, 0xAF, 0xAF, 0xFF, 0xFF, 0x9E, 0xA3, 0xA0];
immutable ubyte[] saveTextTilemap = [0xFF, 0xD2, 0xC0, 0xD5, 0xC4, 0xDE, 0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF];

void titleScreenRoutine() {
	oamClearTable();
	bgPalette = 0x93;
	if (!(countdownTimer & 0x300) && (cast(ubyte)countdownTimer < 16) && (countdownTimer & 1)) {
		bgPalette = 0x90;
	}
	if (titleStarX >= 3) {
		titleStarX -= 2;
		titleStarY += 1;
	}
	if ((gb.DIV == frameCounter) && (frameCounter & 1)) {
		titleStarY = gb.DIV;
		titleStarX = 0xFF;
	}
	spriteYPixel = titleStarY;
	spriteXPixel = titleStarX;
	spriteID = 6;
	spriteAttr = (frameCounter & 2) << 1;
	drawNonGameSprite();
	spriteYPixel = 116;
	if (titleClearSelected) {
		spriteYPixel = 128;
	}
	spriteXPixel = 56;
	spriteAttr = 0;
	spriteID = titleCursorTable[(frameCounter & 0b1100) >> 2];
	drawNonGameSprite();
	spriteID = cast(ubyte)(activeSaveSlot + 35);
	drawNonGameSprite();
	spriteXPixel = 68;
	spriteYPixel = 116;
	spriteID = 0;
	drawNonGameSprite();
	if (titleShowClearOption) {
		spriteYPixel = 128;
		spriteID = 1;
		drawNonGameSprite();
	}
	titleClearUnusedOAMSlots();
	if (inputRisingEdge == Pad.select) {
		audio.sfxRequestSquare1 = Square1SFX.select;
		titleShowClearOption ^= 0xFF;
	}
	if ((inputRisingEdge == Pad.right) && (inputPressed == Pad.right)) {
		audio.sfxRequestSquare1 = Square1SFX.select;
		activeSaveSlot++;
		if (activeSaveSlot == 3) {
			activeSaveSlot = 0;
		}
	}
	if ((inputRisingEdge == Pad.left) && (inputPressed == Pad.left)) {
		audio.sfxRequestSquare1 = Square1SFX.select;
		activeSaveSlot--;
		if (activeSaveSlot == 0xFF) {
			activeSaveSlot = 2;
		}
	}
	titleClearSelected = 0;
	if (titleShowClearOption && (inputPressed & Pad.down)) {
		titleClearSelected = 1;
		if (inputRisingEdge & Pad.down) {
			audio.sfxRequestSquare1 = Square1SFX.select;
		}
	}
	if (!(inputRisingEdge & Pad.start)) {
		return;
	}
	debugFlag = 0;
	bgPalette = 0x93;
	if (titleClearSelected) {
		audio.sfxRequestNoise = NoiseSFX.u0F;
		enableSRAM();
		sram.saves[activeSaveSlot].magic[0 .. 2] = 0;
		disableSRAM();
		titleShowClearOption = 0;
		infof("Save file %s cleared", activeSaveSlot);
		return;
	}
	audio.sfxRequestSquare1 = Square1SFX.select;
	audio.songRequest = Song.samusFanfare;
	loadingFromFile = 0;
	version(none) { // this only worked accidentally
		//ld hl, saveFile_magicNumber
		//; Get base address of save slot
		//; de = $A000 + (activeSaveSlot * $40)
		//ld a, [activeSaveSlot]
		//sla a
		//sla a
		//swap a
		//ld e, a
		//ld d, HIGH(saveData_baseAddr) ;$A0
		//; Loop until we find a mismatch between the magic number in ROM and the save slot
		//.checkLoop:
		//	ld a, [hl+]
		//	ld b, a
		//	ld a, [de]
		//	inc de
		//	cp b
		//jr z, .checkLoop
		//; Check if the last byte read from ROM was greater than $08
		//ld a, b
		//cp $08
		//jr c, .endIf_J
		//	ld a, $ff
		//	ld [loadingFromFile], a
		//.endIf_J:
	} else {
		if (sram.saves[activeSaveSlot].magic == saveMagic) {
			loadingFromFile = 0xFF;
		}
	}
	sram.saveLastSlot = activeSaveSlot;
	disableSRAM();
	gameMode = GameMode.newGame;
	if (loadingFromFile) {
		gameMode = GameMode.loadSave;
	}
}

void titleLoadGraphics() {
	copyToVRAM(&graphicsTitleScreen[0], &gb.vram[VRAMDest.titleTiles], 0x1000);
}
void titleClearUnusedOAMSlots() {
	oamBuffer[oamBufferIndex .. $] = oamBuffer[0].init;
}

immutable ubyte[] titleCursorTable = [2, 3, 4, 3];

immutable ubyte[] titleTileMap = [
	0x45, 0xFF, 0x42, 0xFF, 0xFF, 0xFF, 0xFF, 0x41, 0xFF, 0xFF, 0xFF, 0xFF, 0x40, 0x42, 0xFF, 0xFF, 0xFF, 0xFF, 0x43, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0x41, 0x40, 0xFF, 0xFF, 0x43, 0xFF, 0xFF, 0xDD, 0xDE, 0xDF, 0xE0, 0xE1, 0xE2, 0xFF, 0xFF, 0x44, 0x42, 0xFF, 0xFF, 0x40, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x46, 0xE3, 0xE4, 0xE5, 0xE6, 0x47, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0x44, 0xFF, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F, 0xD0, 0xD1, 0xD2, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xD3, 0xD4, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF, 0xD5, 0xD6, 0xD7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0x80, 0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF, 0xD8, 0xD9, 0xDA, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xC1, 0xC0, 0xFF, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xDB, 0xDC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0x45, 0xFF, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0xFF, 0xFF, 0x41, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0x42, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x45, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0x40, 0x45, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x41, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0x45, 0x44, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x44, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0x42, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x42, 0xFF, 0xFF, 0x40, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0x40, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x45, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0x41, 0xFF, 0x0F, 0x1F, 0x3E, 0x3E, 0x3F, 0xFF, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0xFF, 0xFF, 0x44, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0x42, 0x44, 0xFF, 0xFF, 0x41, 0xFF, 0xFF, 0xFF, 0xFF, 0x43, 0xFF, 0x41, 0xFF, 0xFF, 0xFF, 0xFF, 0x42, 0xFF, 0xFF, 0x43, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
];

void handleCredits() {
	spriteYPixel = samusY.pixel;
	spriteXPixel = samusX.pixel;
	creditsAnimateSamus();
	creditsScrollHandler();
	creditsDrawTimer();
	creditsMoveStars();
	creditsDrawStars();
	titleClearUnusedOAMSlots();
}

void creditsDrawTimer() {
	if (!creditsScrollingDone) {
		return;
	}
	spriteYPixel = 136;
	spriteXPixel = 66;
	creditsDrawTimerDigits(gameTimeHours);
	spriteXPixel = 86;
	creditsDrawTimerDigits(gameTimeMinutes);
}

void creditsMoveStars() {
	foreach (ref star; creditsStarArray) {
		if ((frameCounter & 3) == 0) {
			if (++star[0] == 0xA0) {
				star[0] = 16;
			}
			if (--star[1] == 0xF8) {
				star[1] = 0xA8;
			}
		}
	}
}

void creditsDrawStars() {
	foreach (idx, star; creditsStarArray) {
		spriteYPixel = star[0];
		spriteXPixel = star[1];
		spriteID = cast(ubyte)(((16 - idx) & 1) + 0x1B);
		drawNonGameSprite();
	}
}

void creditsAnimateSamus() {
	final switch (creditsSamusAnimState) {
		case SamusCreditsState.standingStart:
			creditsDrawSamus(10);
			if (gameTimeHours >= 7) { // worst ending, no animation
				break;
			}
			if (countdownTimer == 0) {
				creditsRunAnimCounter = 0;
				creditsRunAnimFrame = 0;
				creditsScrollingDone = 0;
				countdownTimer = 4608; //about 76.8 seconds
				creditsSamusAnimState = SamusCreditsState.running;
			}
			break;
		case SamusCreditsState.running:
			if (++creditsRunAnimCounter >= 6) {
				creditsRunAnimCounter = 0;
				if (++creditsRunAnimFrame == 4) {
					creditsRunAnimFrame = 0;
				}
			}
			creditsDrawSamus(creditsRunAnimFrame);
			if (gameTimeHours >= 5) { // second-worst ending, only running
				return;
			}
			if (!creditsScrollingDone) {
				return;
			}
			countdownTimer = 64;
			creditsSamusAnimState = SamusCreditsState.spinRising;
			break;
		case SamusCreditsState.unused:
			break;
		case SamusCreditsState.spinRising:
			if ((samusY.pixel & 0xF0) != 0xE0) {
				samusY -= 3;
			}
			creditsDrawSamus(4 + (frameCounter & 3));
			if (countdownTimer == 0) {
				creditsSamusAnimState = SamusCreditsState.spinFalling;
			}
			break;
		case SamusCreditsState.spinFalling:
			samusY += 3;
			creditsDrawSamus(4 + (frameCounter & 3));
			if ((samusY.pixel & 0xFC) == 96) {
				countdownTimer = 32;
				if (gameTimeHours < 3) { // best ending, suitless samus
					creditsSamusAnimState = SamusCreditsState.suitlessKneeling;
				} else {
					creditsSamusAnimState = SamusCreditsState.suitedKneeling;
				}
			}
			break;
		case SamusCreditsState.suitlessKneeling:
			creditsDrawSamus(9);
			if (countdownTimer == 0) {
				countdownTimer = 48;
				creditsSamusAnimState = SamusCreditsState.untying01;
			}
			break;
		case SamusCreditsState.untying01:
			creditsDrawSamus(11);
			if (countdownTimer == 0) {
				countdownTimer = 8;
				creditsSamusAnimState = SamusCreditsState.untying02;
			}
			break;
		case SamusCreditsState.untying02:
			creditsDrawSamus(12);
			if (countdownTimer == 0) {
				countdownTimer = 16;
				creditsSamusAnimState = SamusCreditsState.untying03;
			}
			break;
		case SamusCreditsState.untying03:
			creditsDrawSamus(13);
			if (countdownTimer == 0) {
				countdownTimer = 8;
				creditsSamusAnimState = SamusCreditsState.untying04;
			}
			break;
		case SamusCreditsState.untying04:
			creditsDrawSamus(12);
			if (countdownTimer == 0) {
				countdownTimer = 8;
				creditsSamusAnimState = SamusCreditsState.untying05;
			}
			break;
		case SamusCreditsState.untying05:
			creditsDrawSamus(11);
			if (countdownTimer == 0) {
				countdownTimer = 8;
				creditsSamusAnimState = SamusCreditsState.untying06;
			}
			break;
		case SamusCreditsState.untying06:
			creditsDrawSamus(14);
			if (countdownTimer == 0) {
				countdownTimer = 8;
				creditsSamusAnimState = SamusCreditsState.untying07;
			}
			break;
		case SamusCreditsState.untying07:
			creditsDrawSamus(11);
			if (countdownTimer == 0) {
				countdownTimer = 8;
				creditsSamusAnimState = SamusCreditsState.untying08;
			}
			break;
		case SamusCreditsState.untying08:
			creditsDrawSamus(15);
			if (countdownTimer == 0) {
				countdownTimer = 8;
				creditsSamusAnimState = SamusCreditsState.untying09;
			}
			break;
		case SamusCreditsState.untying09:
			creditsDrawSamus(11);
			if (countdownTimer == 0) {
				countdownTimer = 10;
				creditsSamusAnimState = SamusCreditsState.untying10;
			}
			break;
		case SamusCreditsState.untying10:
			creditsDrawSamus(14);
			if (countdownTimer == 0) {
				countdownTimer = 10;
				creditsSamusAnimState = SamusCreditsState.untying11;
			}
			break;
		case SamusCreditsState.untying11:
			creditsDrawSamus(16);
			if (countdownTimer == 0) {
				countdownTimer = 10;
				creditsSamusAnimState = SamusCreditsState.untying12;
			}
			break;
		case SamusCreditsState.untying12:
			creditsDrawSamus(17);
			if (countdownTimer == 0) {
				countdownTimer = 32;
				creditsSamusAnimState = SamusCreditsState.untying13;
			}
			break;
		case SamusCreditsState.untying13:
			creditsDrawSamus(18);
			if (countdownTimer == 0) {
				creditsSamusAnimState = SamusCreditsState.hairWaving;
			}
			break;
		case SamusCreditsState.suitedKneeling:
			creditsDrawSamus(8);
			if (countdownTimer == 0) {
				countdownTimer = 48;
				creditsSamusAnimState = SamusCreditsState.suitedStandingEnd;
			}
			break;
		case SamusCreditsState.suitedStandingEnd:
			creditsDrawSamus(10);
			break;
		case SamusCreditsState.hairWaving:
			creditsDrawSamus(cast(ubyte)(((frameCounter & 0x10) >> 4) + 19));
			break;
	}
}

immutable ubyte[] creditsPaletteFade = [0xFF, 0xFF, 0xFB, 0xEB, 0xE7, 0xA7, 0xA3, 0x93];

void handlePrepareCredits() {
	if (countdownTimer != 0) {
		bgPalette = creditsPaletteFade[(countdownTimer & 0xF0) >> 5];
		obPalette0 = creditsPaletteFade[(countdownTimer & 0xF0) >> 5];
		obPalette1 = creditsPaletteFade[(countdownTimer & 0xF0) >> 5];
		if (countdownTimer >= 14) {
			return;
		}
		countdownTimer = 0;
		audio.sfxRequestLowHealthBeep = 0xFF;
	}
	gb.LCDC = 0x03;
	bgPalette = 0x93;
	obPalette0 = 0x93;
	obPalette1 = 0x43;
	clearTilemaps();
	oamBuffer = oamBuffer.init;
	creditsLoadFont();
	copyToVRAM(&graphicsCreditsSprTiles[0], &gb.vram[VRAMDest.creditsSpriteTiles], 0x1000);
	copyToVRAM(&graphicsTheEnd[0], &gb.vram[VRAMDest.theEndTiles], 0x100);
	copyToVRAM(&graphicsCreditsNumbers[0], &gb.vram[VRAMDest.creditsNumbers], 0x100);
	creditsTextPointer = &creditsTextBuffer[0];
	creditsUnusedVar = 0;
	creditsStarArray[0 .. 8] = creditsStarPositions[0 .. 8]; // only copy half...?
	loadCreditsText();
	scrollY = 0;
	scrollX = 0;
	gb.LCDC = 0xC3;
	countdownTimer = 0xFF;
	samusY = (samusY & 0xFF00) | 0x60;
	samusX = (samusX & 0xFF00) | 0x88;
	audio.songRequest = Song.reachedTheGunship;
	creditsSamusAnimState = SamusCreditsState.standingStart;
	gameMode = GameMode.credits;
}

void creditsScrollHandler() {
	auto hl = creditsTextPointer;
	enableSRAM(); // normally the buffer is stored in SRAM
	const chr = hl[0];
	disableSRAM();
	if (chr == 0xF0) {
		creditsScrollingDone = 1;
		return;
	}
	if (frameCounter & 3) { // only every 4 frames
		return;
	}
	if (++scrollY & 7) {
		return;
	}
	tileY = cast(ubyte)(scrollY + 0xA0);
	tileX = 8;
	getTilemapAddress();
	creditsNextLineReady = 0xFF;
}

void creditsRebootGame() {
	gameMode = GameMode.boot;
}

void creditsDrawSamus(ubyte spr) {
	switch (spr) {
		case 0: // running frames
			spriteID = 8;
			drawNonGameSprite();
			spriteID = 11;
			drawNonGameSprite();
			break;
		case 1:
			spriteID = 9;
			drawNonGameSprite();
			spriteID = 12;
			drawNonGameSprite();
			break;
		case 2:
			spriteID = 10;
			drawNonGameSprite();
			spriteAttr = OAMFlags.xFlip;
			spriteXPixel--;
			spriteID = 11;
			drawNonGameSprite();
			spriteAttr = 0;
			break;
		case 3:
			spriteID = 9;
			drawNonGameSprite();
			spriteAttr = OAMFlags.xFlip;
			spriteID = 12;
			drawNonGameSprite();
			spriteAttr = 0;
			break;
		case 4: // jumping frames
			spriteID = 31;
			drawNonGameSprite();
			break;
		case 5:
			spriteID = 32;
			drawNonGameSprite();
			break;
		case 6:
			spriteID = 33;
			drawNonGameSprite();
			break;
		case 7:
			spriteID = 34;
			drawNonGameSprite();
			break;
		case 8: // suited kneeling
			spriteID = 18;
			drawNonGameSprite();
			break;
		case 9: // suitless kneeling
			spriteID = 17;
			drawNonGameSprite();
			break;
		case 10: // suited standing
			spriteID = 7;
			drawNonGameSprite();
			break;
		case 11: // suitless hair up, hand down
			spriteID = 14;
			drawNonGameSprite();
			spriteID = 15;
			drawNonGameSprite();
			spriteID = 16;
			drawNonGameSprite();
			break;
		case 12: // suitless reaching for hair
			spriteID = 14;
			drawNonGameSprite();
			spriteID = 19;
			drawNonGameSprite();
			spriteID = 16;
			drawNonGameSprite();
			break;
		case 13: // suitless untying hair
			spriteID = 20;
			drawNonGameSprite();
			spriteID = 16;
			drawNonGameSprite();
			break;
		case 14: // suitless head turned left
			spriteID = 21;
			drawNonGameSprite();
			spriteID = 15;
			drawNonGameSprite();
			spriteID = 16;
			drawNonGameSprite();
			break;
		case 15: // suitless head turned right
			spriteID = 22;
			drawNonGameSprite();
			spriteID = 15;
			drawNonGameSprite();
			spriteID = 16;
			drawNonGameSprite();
			break;
		case 16: // suitless hair unfurl 1
			spriteID = 23;
			drawNonGameSprite();
			spriteID = 15;
			drawNonGameSprite();
			spriteID = 16;
			drawNonGameSprite();
			break;
		case 17: // suitless hair unfurl 2
			spriteID = 24;
			drawNonGameSprite();
			spriteID = 15;
			drawNonGameSprite();
			spriteID = 16;
			drawNonGameSprite();
			break;
		case 18: // suitless hair unfurl 3
			spriteID = 25;
			drawNonGameSprite();
			spriteID = 15;
			drawNonGameSprite();
			spriteID = 16;
			drawNonGameSprite();
			break;
		case 19: // suitless hair wave 1
			spriteID = 24;
			drawNonGameSprite();
			spriteID = 15;
			drawNonGameSprite();
			spriteID = 16;
			drawNonGameSprite();
			break;
		case 20: // suitless hair wave 2
			spriteID = 26;
			drawNonGameSprite();
			spriteID = 15;
			drawNonGameSprite();
			spriteID = 16;
			drawNonGameSprite();
			break;
		default: break;
	}
}

immutable ubyte[2][] creditsStarPositions = [
	[0x28, 0x90],
	[0x18, 0x70],
	[0x68, 0x30],
	[0x50, 0x88],
	[0x40, 0x18],
	[0x18, 0x20],
	[0x90, 0x68],
	[0x48, 0x40],
	[0x88, 0x18],
	[0x80, 0x88],
	[0x28, 0x50],
	[0x60, 0x10],
	[0x98, 0x38],
	[0x58, 0x68],
	[0x78, 0x58],
	[0x38, 0x70],
];
