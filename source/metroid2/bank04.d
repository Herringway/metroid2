module metroid2.bank04;

import metroid2.defs;
import metroid2.globals;

immutable ubyte channelSongProcessingStateSize = 9;
immutable ubyte channelAllSongProcessingStateSizes = 45;
immutable ubyte songProcessingStateSize = 97;

immutable ushort[] musicNotes = [
	0x802C, 0x809C, 0x8106, 0x816B, 0x81C9, 0x8223, 0x8277, 0x82C6, 0x8312, 0x8356, 0x839B, 0x83DA,
	0x8416, 0x844E, 0x8483, 0x84B5, 0x84E5, 0x8511, 0x853B, 0x8563, 0x8589, 0x85AC, 0x85CE, 0x85ED,
	0x860A, 0x8627, 0x8642, 0x865B, 0x8672, 0x8689, 0x869E, 0x86B2, 0x86C4, 0x86D6, 0x86E7, 0x86F7,
	0x8706, 0x8714, 0x8721, 0x872D, 0x8739, 0x8744, 0x874F, 0x8759, 0x8762, 0x876B, 0x8773, 0x877B,
	0x8783, 0x878A, 0x8790, 0x8797, 0x879D, 0x87A2, 0x87A7, 0x87AC, 0x87B1, 0x87B6, 0x87BA, 0x87BE,
	0x87C1, 0x87C4, 0x87C8, 0x87CB, 0x87CE, 0x87D1, 0x87D4, 0x87D6, 0x87D9, 0x87DB, 0x87DD, 0x87DF,
];

//                           _______________________________________________________________________________ BPM (in decimal)
//                          |      _________________________________________________________________________ 0: 1/32. Demisemiquaver
//                          |     |      ___________________________________________________________________ 1: 1/16. Semiquaver
//                          |     |     |      _____________________________________________________________ 2: 1/8. Quaver
//                          |     |     |     |      _______________________________________________________ 3: 1/4. Crochet
//                          |     |     |     |     |      _________________________________________________ 4: 1/2. Minum
//                          |     |     |     |     |     |      ___________________________________________ 5: 1. Semibreve
//                          |     |     |     |     |     |     |      _____________________________________ 6: 3/16. Dotted quaver
//                          |     |     |     |     |     |     |     |      _______________________________ 7: 3/8. Dotted crochet
//                          |     |     |     |     |     |     |     |     |      _________________________ 8: 3/4. Dotted minum
//                          |     |     |     |     |     |     |     |     |     |      ___________________ 9: 1/12. Triplet quaver
//                          |     |     |     |     |     |     |     |     |     |     |      _____________ Ah: 1/6. Triplet crochet
//                          |     |     |     |     |     |     |     |     |     |     |     |      _______ Bh: 1/64. Hemidemisemiquaver
//                          |     |     |     |     |     |     |     |     |     |     |     |     |      _ Ch: 2. Breve
//                          |     |     |     |     |     |     |     |     |     |     |     |     |     |
immutable ubyte[] tempoTable448= [0x01, 0x01, 0x02, 0x04, 0x08, 0x10, 0x03, 0x06, 0x0C, 0x01, 0x03, 0x01, 0x20];
immutable ubyte[] tempoTable224= [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x06, 0x0C, 0x18, 0x02, 0x05, 0x01, 0x40];
immutable ubyte[] tempoTable149= [0x02, 0x03, 0x06, 0x0C, 0x18, 0x30, 0x09, 0x12, 0x24, 0x04, 0x08, 0x01, 0x60];
immutable ubyte[] tempoTable112= [0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x0C, 0x18, 0x30, 0x05, 0x0A, 0x01, 0x80];
immutable ubyte[] tempoTable90 = [0x03, 0x05, 0x0A, 0x14, 0x28, 0x50, 0x0F, 0x1E, 0x3C, 0x07, 0x0E, 0x01, 0xA0];
immutable ubyte[] tempoTable75 = [0x03, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x12, 0x24, 0x48, 0x08, 0x10, 0x02, 0xC0];
immutable ubyte[] tempoTable64 = [0x03, 0x07, 0x0E, 0x1C, 0x38, 0x70, 0x15, 0x2A, 0x54, 0x09, 0x12, 0x02, 0xE0];
immutable ubyte[] tempoTable56 = [0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x18, 0x30, 0x60, 0x0A, 0x14, 0x02, 0xFF];
immutable ubyte[] tempoTable50 = [0x04, 0x09, 0x12, 0x24, 0x48, 0x90, 0x1B, 0x36, 0x6C, 0x0C, 0x1A, 0x02, 0xFF];

immutable ubyte[] wave0 = [0xee, 0xee, 0xa5, 0xe5, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
immutable ubyte[] wave1 = [0xcc, 0xcc, 0x82, 0xc3, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
immutable ubyte[] unused = [0x77, 0x77, 0x51, 0xa2, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xdc, 0xba, 0x98, 0x8a, 0xa8, 0x32, 0x10, 0xfe, 0xed, 0xdb, 0xa9, 0x87, 0x65, 0x31, 0x00, 0x99, 0xaa, 0xbb, 0xcc, 0xbb, 0xaa, 0x77, 0x33, 0x11, 0x34, 0x67, 0x89, 0xaa, 0xa7, 0x87, 0x78, 0xab, 0xef, 0xfe, 0xda, 0x97, 0x43, 0x11, 0x31];
immutable ubyte[] wave2 = [0xEE, 0xEE, 0xEE, 0x00, 0x00, 0x00, 0xEE, 0xEE, 0xEE, 0x00, 0x00, 0x00, 0xEE, 0x00, 0xEE, 0x00];
immutable ubyte[] wave3 = [0xAA, 0xAA, 0xAA, 0x00, 0x00, 0x00, 0xAA, 0xAA, 0xAA, 0x00, 0x00, 0x00, 0xAA, 0x00, 0xAA, 0x00];
immutable ubyte[] wave4 = [0x77, 0x77, 0x77, 0x00, 0x00, 0x00, 0x77, 0x77, 0x77, 0x00, 0x00, 0x00, 0x77, 0x00, 0x77, 0x00];
immutable ubyte[] wave5 = [0x44, 0x00, 0x22, 0x00, 0x00, 0x00, 0x22, 0x44, 0x44, 0x00, 0x00, 0x00, 0x33, 0x00, 0x44, 0x00];
immutable ubyte[] wave6 = [0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00];

// Sound length
//     00tttttt
//     Sound length = 0.25 * (1 - t/40h) seconds
//
// Envelope
//     vvvvdttt
//     Envelope step length = t/8 * 0.125 seconds
//     d: Envelope direction. 0: Decrease, 1: Increase
//     v: Initial volume
//
// Polynomial counter
//     nnnnwaaa
//     If a = 0:
//         Frequency = 80000h / 2^n hertz
//     Else:
//         Frequency = 40000h / (a * 2^n) hertz
//     w: Counter width. 0: 7 bits, 1: 15 bits
//
// Counter control
//     rs000000
//     r: Restart sound
//     s: Stop output after sound has finished (according to sound length)
//    ___________________ Sound length
//   |      _____________ Envelope
//   |     |      _______ Polynomial counter
//   |     |     |      _ Counter control
//   |     |     |     |
immutable ubyte[4][] songNoiseChannelOptionSets = [
	[0x00, 0x08, 0x00, 0x80],
	[0x00, 0x21, 0x3D, 0x80], //unused
	[0x30, 0x40, 0x31, 0xC0],
	[0x00, 0x31, 0x3E, 0x80],
	[0x35, 0xF7, 0x6E, 0xC0],
	[0x30, 0x61, 0x4B, 0xC0],
	[0x30, 0xC1, 0x6D, 0xC0],
	[0x00, 0x81, 0x4B, 0x80],
	[0x00, 0xF6, 0x6D, 0x80],
	[0x00, 0xB6, 0x6D, 0x80],
	[0x00, 0x77, 0x6D, 0x80],
	[0x00, 0x47, 0x6D, 0x80],
	[0x00, 0x97, 0x6B, 0x80],
	[0x00, 0x77, 0x6B, 0x80],
	[0x00, 0x57, 0x6B, 0x80],
	[0x00, 0x37, 0x6B, 0x80],
	[0x00, 0x80, 0x6D, 0x80],
	[0x00, 0x40, 0x4D, 0x80],
	[0x00, 0x1F, 0x47, 0x80],
	[0x00, 0x40, 0x47, 0x80],
	[0x00, 0x40, 0x46, 0x80],
	[0x00, 0x40, 0x45, 0x80],
	[0x00, 0x40, 0x44, 0x80],
	[0x00, 0x40, 0x43, 0x80],
	[0x00, 0x40, 0x42, 0x80],
	[0x00, 0x40, 0x41, 0x80],
	[0x00, 0x1B, 0x37, 0x80],
	[0x00, 0xA5, 0x27, 0x80],
	[0x00, 0x1F, 0x37, 0x80],
	[0x00, 0x27, 0x46, 0x80],
	[0x00, 0x27, 0x45, 0x80],
	[0x00, 0x1B, 0x6B, 0x80],
	[0x00, 0x1A, 0x6B, 0x80],
	[0x00, 0x19, 0x6B, 0x80],
	[0x00, 0x1F, 0x37, 0x80],
	[0x00, 0x1C, 0x6C, 0x80],
	[0x00, 0x51, 0x4D, 0x80],
	[0x30, 0xF1, 0x6F, 0xC0],
	[0x38, 0xA1, 0x3B, 0xC0],
	[0x38, 0xA1, 0x3A, 0xC0],
	[0x00, 0xF4, 0x7A, 0x80],
	[0x00, 0xF4, 0x7B, 0x80],
];

immutable ubyte[16][5] songSoundChannelEffectTable = [
	[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01],
	[0x08, 0x10, 0x18, 0x20, 0x28, 0x30, 0x38, 0x40, 0x38, 0x30, 0x28, 0x20, 0x18, 0x10, 0x08, 0x00],
	[0x00, 0x05, 0x00, 0x05, 0x00, 0x05, 0x00, 0x05, 0x05, 0x00, 0x05, 0x00, 0x05, 0x00, 0x05, 0x00],
	[0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01],
	[0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03],
];

void handleAudio() {
	 //assert(0); // TODO
}

void handleAudioHandleSongInterruptionRequest() {
	 assert(0); // TODO
}

void handleAudioHandleSongInterruptionPlaying() {
	 assert(0); // TODO
}

void handleSongAndSoundEffects() {
	 assert(0); // TODO
}

void clearSongInterruption() {
	songInterruptionRequest = Song2.nothing;
	songInterruptionPlaying = Song2.nothing;
}
void playSongInterruptionItemGet(Song2 a) {
	songInterruptionPlaying = a;
	songRequest = Song.itemGet;
	playSongInterruption();
}
void playSongInterruptionMissilePickup(Song2 a) {
	songInterruptionPlaying = a;
	songRequest = Song.missilePickup;
	playSongInterruption();
}
void playSongInterruptionEarthquake(Song2 a) {
	songInterruptionPlaying = a;
	songRequest = cast(Song)a;
	playSongInterruption();
}
void playSongInterruption() {
	 assert(0); // TODO
}

void startEndingSongInterruption(ubyte a) {
	 assert(0); // TODO
}

void finishEndingSongInterruption() {
	 assert(0); // TODO
}

void handleAudioInitiateFadingOutMusic() {
	 assert(0); // TODO
}

void handleAudioHandleFadingOutMusic() {
	 assert(0); // TODO
}

void handleChannelSoundEffectSquare1() {
	 assert(0); // TODO
}

void handleChannelSoundEffectSquare2() {
	 assert(0); // TODO
}

void handleChannelSoundEffectNoise() {
	 assert(0); // TODO
}

void handleChannelSoundEffectWave() {
	 assert(0); // TODO
}

void handleSong() {
	 assert(0); // TODO
}

void disableSoundChannels() {
	 assert(0); // TODO
}

void clearSongPlaying() {
	songPlaying = Song.nothing;
}

void handleSongPlaying() {
	 assert(0); // TODO
}

void loadPointerFromTable() {
	 assert(0); // TODO
}

void decrementChannelSoundEffectTimerSquare1() {
	 assert(0); // TODO
}

void gotoClearChannelSoundEffectSquare1() {
	 assert(0); // TODO
}

void decrementChannelSoundEffectTimerSquare2() {
	 assert(0); // TODO
}

void gotoClearChannelSoundEffectSquare2() {
	 assert(0); // TODO
}

void decrementChannelSoundEffectTimerNoise() {
	 assert(0); // TODO
}

void gotoClearChannelSoundEffectNoise() {
	 assert(0); // TODO
}

void clearChannelSoundEffectSquare1() {
	 assert(0); // TODO
}

void disableChannelSquare1() {
	 assert(0); // TODO
}

void clearChannelSoundEffectSquare2() {
	 assert(0); // TODO
}

void disableChannelSquare2() {
	 assert(0); // TODO
}

void clearChannelSoundEffectWave() {
	 assert(0); // TODO
}

void disableChannelWave() {
	 assert(0); // TODO
}

void clearChannelSoundEffectNoise() {
	 assert(0); // TODO
}

void disableChannelNoise() {
	 assert(0); // TODO
}

void initializeAudio() {
	 //assert(0); // TODO
}

void clearNonWaveSoundEffectRequests() {
	 assert(0); // TODO
}

void silenceAudio() {
	 //assert(0); // TODO
}

void muteSoundChannels() {
	 assert(0); // TODO
}
